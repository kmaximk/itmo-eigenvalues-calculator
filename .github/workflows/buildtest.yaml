name: BuildTest

on:
  workflow_dispatch:  
    inputs:
      test_only_real:
        description: 'Only real eigenvalues are supported'
        required: false
        type: boolean
        default: false
        
  pull_request:
    branches: [ feedback ]
    types: [ opened, reopened ] 
  
env:
  COMPILER: "clang"
  C_ARGS: "-D _CRT_SECURE_NO_WARNINGS -D _USE_MATH_DEFINES -O2  -Werror=return-type -Werror=strict-prototypes -Wvla -Wunused-variable"
  C_FILES: "-I '../include/' $((Get-ChildItem -Path .. -Include @('*.c') -Recurse -ErrorAction SilentlyContinue -Force).FullName)"
  INPUT: "test_data/in"
  OUTPUT: "test_data/out"
  REF: "test_data/ref"
  BUILDLOG: "build.log"
  OUTLOG: "result.log"
  TEST_ONLY_REAL: $(try{$${{ inputs.test_only_real }}}catch{$false})
  COUNT_TESTS: (2-[int][bool]::Parse($(try{$${{ inputs.test_only_real }}}catch{$false})))

defaults:
  run:
    shell: pwsh

jobs:                
  buildtest:
    if: (github.run_number > 1) && ((github.actor == 'RonoveRaum') || (github.run_number < 16))
    outputs:
      test_exit_code: ${{ steps.tests.outputs.test_exit_code }}
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        os:  [ubuntu-22.04, windows-latest] 
    
    runs-on: ${{ matrix.os }}
    timeout-minutes: 4

    env:
      EXE: __test.exe
      STUPID_LINUX_LIBM: $(If ('${{ matrix.os }}' -eq 'windows-latest') {''} Else {'-lm'})
      STUPID_CLANG15_FLAG: $(If ('${{ matrix.os }}' -eq 'windows-latest') {'-Wno-deprecated-non-prototype'} Else {''})

    steps:
      - uses: actions/checkout@v3
      
      - name: init
        id: init
        run: | 
          echo "# Input parameters" >> $env:GITHUB_STEP_SUMMARY
          echo "'Only real eigenvalues are supported' : ${{env.TEST_ONLY_REAL}}" >> $env:GITHUB_STEP_SUMMARY
          echo "[note] if 'Only real eigenvalues are supported' == true then only tests with real eigenvalues will be run" >> $env:GITHUB_STEP_SUMMARY
      
          git config user.name github-actions
          git config user.email github-actions@github.com 
          
          if ('${{ matrix.os }}' -eq 'windows-latest') 
          { 
            echo "# Fetch all"
            git fetch --all
            git checkout main
            git pull
          }
        
          Remove-Item 'test_data/*' -Recurse -Include out_${{ matrix.os }}_*
                    
      - name: clang_format
        id: clang_format
        if: matrix.os != 'windows-latest'
        run: | 
          echo "# clang-format" >> $env:GITHUB_STEP_SUMMARY
          
          clang-format-12 --version            
          $a = Get-ChildItem -Recurse -Force -File -Name -LiteralPath '.' -Include @('*.c', '*.h') | Where-Object { $_ -notlike 'return_codes.h' }

          echo "    Checking formating files: $a
                    ">> $env:GITHUB_STEP_SUMMARY

          clang-format-12 --dry-run --style=file $a 2>&1 | tee log.txt

          if ((Get-ChildItem -Path log.txt).Length -eq 0) 
          {
            echo "    clang-format OK ✅
                     ">> $env:GITHUB_STEP_SUMMARY
          }
          else
          {
            echo "    clang-format !OK ❌
                      ">> $env:GITHUB_STEP_SUMMARY                                      
            echo "
            $(Get-Content log.txt -Raw)
            " >> $env:GITHUB_STEP_SUMMARY
          }
          
      - name: build
        id: build
        run: |
          [void](mkdir __build)
          cd __build 
          
          try 
          {
            $ErrorActionPreference = 'SilentlyContinue'
            #pwsh -Command { ${{env.COMPILER}} ${{env.C_ARGS}} ${{env.C_FILES}} -o ${{env.EXE}} *>&1 > ${{env.BUILDLOG}} } 
            & ${{env.COMPILER}} ${{env.C_ARGS}} ${{env.STUPID_CLANG15_FLAG}} ${{env.C_FILES}} -o ${{env.EXE}} ${{env.STUPID_LINUX_LIBM}} *>&1 > ${{env.BUILDLOG}}
          
          } 
          catch 
          {
            Write-Output "❌ build failed!"
            echo "# Build: 
               failed" >> $env:GITHUB_STEP_SUMMARY
            echo "Build exit code: $LastExitCode" >> $env:GITHUB_STEP_SUMMARY
            $blog="$(Get-Content ${{env.BUILDLOG}} -Raw)"
            echo "Build log: $blog" >> $env:GITHUB_STEP_SUMMARY 
          } 
          finally 
          {
            $blog="$(Get-Content ${{env.BUILDLOG}} -Raw)"
            echo "# Build log (can be empty):" >> $env:GITHUB_STEP_SUMMARY
            echo "
            $blog
            " >> $env:GITHUB_STEP_SUMMARY

            "::group::Build log"
            echo $blog
            echo "::endgroup::"  
          }
                         
      - name: tests
        id: tests
        continue-on-error: true
        run: |          
          cd __build
          $test_exit_code = 0
          
          foreach ($i in 1..${{env.COUNT_TESTS}})
          {
            echo "# Test $i" >> $env:GITHUB_STEP_SUMMARY  
            "::group::Output log test_$($i)"

            $test_input = "../${{env.INPUT}}$i.txt"
            $test_output = "../${{env.OUTPUT}}_${{matrix.os}}_$i.txt"

            & ./${{env.EXE}} $test_input $test_output 2>stderr.log 1>stdout.log
            $exit_code_p = $LastExitCode           
            
            $stderr = if ((& Test-Path -Path stderr.log -PathType Leaf)) { $(Get-Content stderr.log -Raw) } else {'<empty>'}
            $stdout = if ((& Test-Path -Path stdout.log -PathType Leaf)) { $(Get-Content stdout.log -Raw) } else {'<empty>'}
                        
            $ti = "https://github.com/"+"${{github.repository}}"+"/tree/main/test_data/in$i.txt"
            $tr = "https://github.com/"+"${{github.repository}}"+"/tree/main/test_data/ref$i.txt"
            $to = "https://github.com/"+"${{github.repository}}"+"/tree/main/test_data/out_${{matrix.os}}_$i.txt"
            
            echo "input: [test_data/in$i.txt]($ti)" >> $env:GITHUB_STEP_SUMMARY
            echo "ref: [test_data/ref$i.txt]($tr)" >> $env:GITHUB_STEP_SUMMARY
            echo "exit code: $exit_code_p
            " >> $env:GITHUB_STEP_SUMMARY           
                                   
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "[stderr]: $stderr
            " >> $env:GITHUB_STEP_SUMMARY           
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "[stdout]: $stdout
            " >> $env:GITHUB_STEP_SUMMARY            
            echo "" >> $GITHUB_STEP_SUMMARY
            if ($exit_code_p -ne 0)
            {               
              echo "        ❌ [ERROR] Program completed with code $exit_code_p (!= 0)" >> $env:GITHUB_STEP_SUMMARY                
              $test_exit_code += 10
            }          
            elseif ((& Test-Path -Path stderr.log -PathType Leaf) -and ((Get-ChildItem -Path stderr.log).Length -ne 0))
            {
              echo "        ❌ [ERROR] Stderr is not empty [program completed with code $exit_code_p]" >> $env:GITHUB_STEP_SUMMARY               
              $test_exit_code += 100000
            } 
            elseif (-not (& Test-Path -Path $test_output -PathType Leaf))
            {
              echo "        ❌ [ERROR] Output file does not exist [program completed with code $exit_code_p]" >> $env:GITHUB_STEP_SUMMARY               
              $test_exit_code += 100
            }
            elseif ((Get-ChildItem -Path $test_output).Length -eq 0) 
            {
              echo "        ❌ [ERROR] Output file is empty [program completed with code $exit_code_p]" >> $env:GITHUB_STEP_SUMMARY               
              $test_exit_code += 1000
            }
            elseif ((& Test-Path -Path stdout.log -PathType Leaf) -and ((Get-ChildItem -Path stdout.log).Length -ne 0))
            {
              echo "        ❌ [ERROR] Stdout is not empty [program completed with code $exit_code_p]" >> $env:GITHUB_STEP_SUMMARY                
              $test_exit_code += 10000
            }
            else
            {
              $ref_split = $(Get-Content "../${{env.REF}}$i.txt").split([System.Environment]::NewLine, [System.StringSplitOptions]::RemoveEmptyEntries) | Sort-Object
              $out_split = $(Get-Content $test_output).split([System.Environment]::NewLine, [System.StringSplitOptions]::RemoveEmptyEntries) | Sort-Object

              $res_test = $true
              try
              {
                for($k=0; $k -lt $ref_split.count; $k++)
                {
                    $ref_num = $ref_split[$k] -split ' '
                    $out_num = $out_split[$k] -split ' '

                    if ($ref_num.Length -ne $out_num.Length)
                    {
                        $res_test = $false
                        break
                    }
                    elseif ($ref_num.Length -eq 1)
                    {
                        $res_test = $res_test -and ([Math]::Abs([System.Double]$ref_num[0] - [System.Double]$out_num[0]) -lt 1e-4)
                    }
                    else 
                    {
                        $re_equals = ([Math]::Abs([System.Double]$ref_num[0] - [System.Double]$out_num[0]) -lt 1e-4)
                        $im_equals = ([Math]::Abs([System.Double]$ref_num[1].substring(0, $ref_num[1].length -1) - [System.Double]$out_num[1].substring(0, $out_num[1].length -1)) -lt 1e-4)
                        $res_test = $res_test -and ($re_equals -and $im_equals)
                    }
                }
              }
              catch
              {                  
                $res_test = $false
              }

              if ($res_test) { echo "        ✅ PASSED" >> $env:GITHUB_STEP_SUMMARY }
              else
              {
                echo "        ❌ FAILED [output != expected]" >> $env:GITHUB_STEP_SUMMARY                
                $test_exit_code += 1
              } 
              if (Test-Path $test_output) { git add $test_output }
              echo "output: [test_data/out_${{matrix.os}}_$i.txt]($to)" >> $env:GITHUB_STEP_SUMMARY   
            }
            echo "[debug] error codes: $test_exit_code" >> $env:GITHUB_STEP_SUMMARY   
          }
          "::endgroup::"
          
          "::group::debug"
          if ('${{ matrix.os }}' -eq 'windows-latest') { dir -Recurse -Path .. }
          else { ls -la -R .. }
          "::endgroup::"
          
          "::group::upload results"
          git commit -m "Automatically upload workflow results from ${{matrix.os}}"
          git push --force origin HEAD:main    
          "::endgroup::"
        
          echo "test_exit_code=$test_exit_code" >> $env:GITHUB_OUTPUT
          #echo "::set-output name=test_exit_code::$test_exit_code"
          #exit($test_exit_code)
  
      - uses: actions/upload-artifact@v3
        with:
          name: outputs_${{ matrix.os }}
          path: test_data/out_${{ matrix.os }}_*
          if-no-files-found: warn
          
      - name: end
        id: end
        run : |
          exit(${{steps.tests.outputs.test_exit_code}})